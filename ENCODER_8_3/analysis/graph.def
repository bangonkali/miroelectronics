proc Graph:LoadGraph0 {filename {graph {}}} {

    global tk_status
    global GrXY Graph sigs
    set Graph(result) Passed

    # Display feedback to user
    set tk_status {Open Graph: Creating Graph}
    # update idletasks

    set graphpath [string trimright $filename graph.def]
    if {$graph=={}} {
        # Load needed plotfiles if absent

        set pfwf [Graph:GetSigs3 $graphpath {{{{../encoder38_tf.tr0 v(out_z2)}} {} {} 0} {{{../encoder38_tf.tr0 v(out_z1)}} {} {} 0} {{{../encoder38_tf.tr0 v(out_z0)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a7)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a6)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a5)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a4)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a3)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a2)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a1)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a0)}} {} {} 0}}]

        set pf [lindex $pfwf 0 ]

        set wf [lindex $pfwf 1 ]

        set missingWfIdx [lindex $pfwf 2 ]

        set sigs(wfIdx,load) [lindex $pfwf 3 ]

        # Create the new graph
        set graph [GrXY:NewGraphConfig  {-type xy -font {-family {OF Helvetica} -size 10} -fg {black} -bg {grey80} -actfg {red} 	        -graphbg {white} -legend right -legendaxisdisplay 1 -grid yes 		-sighi legend -maxforfb 10000 		-minwidth 2 -minheight 2 -gridtype - -gridlinestyle {-  } 		-gridlinewidth 1 -gridlinecolor black -subgridlinestyle {-  }                 -subgridlinewidth 1 -subgridlinecolor black -griddashlength 1                 -siglinewidth 1 -rainbow 0 -ptreduct 0 -sigcolors {#0000ff #00a000 #fa7d21 #ff00ff #00c0c0 grey10 #acac00 #ea1700 #898989 #502683} -prezoom {0.000000e+000 0.000000e+000 1.000000e+000 0.000000e+000} -signames {leaf} -anatracehi 2 -digitracehi 1 -digisnap 0 -busdisp hex} {888} {642}]
    } else {
        # Load needed plotfiles if absent

        set pfwf [Graph:GetSigs3 $graphpath {{{{../encoder38_tf.tr0 v(out_z2)}} {} {} 0} {{{../encoder38_tf.tr0 v(out_z1)}} {} {} 0} {{{../encoder38_tf.tr0 v(out_z0)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a7)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a6)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a5)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a4)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a3)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a2)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a1)}} {} {} 0} {{{../encoder38_tf.tr0 v(in_a0)}} {} {} 0}} 0]

        set pf [lindex $pfwf 0 ]

        set wf [lindex $pfwf 1 ]

        set missingWfIdx [lindex $pfwf 2 ]

        set sigs(wfIdx,load) [lindex $pfwf 3 ]

        # Reconfigure graph
        Graph:Select $graph
        Graph itemselect all add
        Graph delsignal selected
        Graph:ClearItems
        $graph config -type xy -font {-family {OF Helvetica} -size 10} -fg {black} -bg {grey80} -actfg {red} 	        -graphbg {white} -legend right -legendaxisdisplay 1 -grid yes 		-sighi legend -maxforfb 10000 		-minwidth 2 -minheight 2 -gridtype - -gridlinestyle {-  } 		-gridlinewidth 1 -gridlinecolor black -subgridlinestyle {-  }                 -subgridlinewidth 1 -subgridlinecolor black -griddashlength 1                 -siglinewidth 1 -rainbow 0 -ptreduct 0 -sigcolors {#0000ff #00a000 #fa7d21 #ff00ff #00c0c0 grey10 #acac00 #ea1700 #898989 #502683} -prezoom {0.000000e+000 0.000000e+000 1.000000e+000 0.000000e+000} -signames {leaf} -anatracehi 2 -digitracehi 1 -digisnap 0 -busdisp hex
    }
    global $graph
    set canvas [set $graph]
    # Set graph colormap
    set Graph($graph,cmap) 2

    # Configure Graph Title
    $graph itemconfig GraphTitle -text {Graph0}

    # Restore Mem Label variables
    # Add the signals to the graph with appropriate attributes
    set configs {-region {10 9 8 7 6 5 4 3 2 1 0} -yview {real(y) real(y) real(y) real(y) real(y) real(y) real(y) real(y) real(y) real(y) real(y)} -xview {real(x) real(x) real(x) real(x) real(x) real(x) real(x) real(x) real(x) real(x) real(x)} -rainbow {0 0 0 0 0 0 0 0 0 0 0} -rbcolors {{} {} {} {} {} {} {} {} {} {} {}} -fill {#0000ff #502683 #898989 #0000ff #502683 #898989 #ff00ff #00a000 #fa7d21 #00a000 #0000ff} -linestyle {- - - - - - - - - - -} -width {1 1 1 1 1 1 1 1 1 1 1} -symbol {{} {} {} {} {} {} {} {} {} {} {}} -symwidth {10 10 10 10 10 10 10 10 10 10 10} -bar {{} {} {} {} {} {} {} {} {} {} {}} -barwidth {0 0 0 0 0 0 0 0 0 0 0} -baseline {0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0} -stipple {{} {} {} {} {} {} {} {} {} {} {}} -label {v(out_z2) v(out_z1) v(out_z0) v(in_a7) v(in_a6) v(in_a5) v(in_a4) v(in_a3) v(in_a2) v(in_a1) v(in_a0)} -xaxis {0 0 0 0 0 0 0 0 0 0 0} -yaxis {0 0 0 0 0 0 0 0 0 0 0} -tracehi {2 2 2 2 2 2 2 2 2 2 2} -bus {{} {} {} {} {} {} {} {} {} {} {}} -segdisp {y y y y y y y y y y y} -monotonicdisp {0 0 0 0 0 0 0 0 0 0 0} -index {30 29 28 27 26 25 24 31 23 22 21}}

    if {$missingWfIdx != ""} {
        set configs [Graph:ResetSigConfigs1 $configs $missingWfIdx]
    }

    set allsigs [eval $graph addsignal {$wf} $configs]

    set s_i 0
    foreach s $allsigs {
        set w_i [lindex $sigs(wfIdx,load) $s_i]
        # use to update axis
        set sigs($s,savedIdx,load) $w_i
        # use to update measurement
        set sigs($w_i,signal,load) $s
        incr s_i
    }

    # Configure the axes
    set numSavedSigs 11
    set ax(0,xaxis,saved) AxisX(0)
    set ax(0,yaxis,saved) AxisY(10,0)
    set ax(1,xaxis,saved) AxisX(0)
    set ax(1,yaxis,saved) AxisY(9,0)
    set ax(2,xaxis,saved) AxisX(0)
    set ax(2,yaxis,saved) AxisY(8,0)
    set ax(3,xaxis,saved) AxisX(0)
    set ax(3,yaxis,saved) AxisY(7,0)
    set ax(4,xaxis,saved) AxisX(0)
    set ax(4,yaxis,saved) AxisY(6,0)
    set ax(5,xaxis,saved) AxisX(0)
    set ax(5,yaxis,saved) AxisY(5,0)
    set ax(6,xaxis,saved) AxisX(0)
    set ax(6,yaxis,saved) AxisY(4,0)
    set ax(7,xaxis,saved) AxisX(0)
    set ax(7,yaxis,saved) AxisY(3,0)
    set ax(8,xaxis,saved) AxisX(0)
    set ax(8,yaxis,saved) AxisY(2,0)
    set ax(9,xaxis,saved) AxisX(0)
    set ax(9,yaxis,saved) AxisY(1,0)
    set ax(10,xaxis,saved) AxisX(0)
    set ax(10,yaxis,saved) AxisY(0,0)
    set ax(AxisY(0,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisX(0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {1 1} -subticks {0} -label {t(s)} -digiview {} -lock {no} -slider {no} -range {0.0 17.99999971297n} -unitscale {auto}}
    set ax(AxisY(1,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(2,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(3,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(6,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(7,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(8,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {-0.043401394039392 1.8250875473022} -unitscale {auto}}
    set ax(AxisY(5,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(9,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {-0.015088750980794 1.8249999284744} -unitscale {auto}}
    set ax(AxisY(4,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {0.0 1.7999999523163} -unitscale {auto}}
    set ax(AxisY(10,0),configs,saved) {-scale {linear} -gridvis {yes} -linticks {} -logticks {} -subticks {0} -label {(V)} -digiview {} -lock {no} -slider {no} -range {-0.0095499781891704 1.8183391094208} -unitscale {auto}}

    set ax(list) ""
    set items [$canvas find all]
    foreach item $items {
        set type [$canvas type $item]
        if {($type == "xaxis")||($type == "yaxis")||($type == "polaraxis")} {
            if {$type == "polaraxis"} {
                set axis [lindex [lindex [$canvas itemconfig $item -tags] 4] 0]
            } else {
                set axis [lindex [lindex [$canvas itemconfig $item -tags] 4] 1]
            }
            lappend ax(list) $axis
        }
    }

    foreach axis $ax(list) {
        set siglist [Graph:GetAllSigsOnAxis1 $axis $allsigs]

        set sig [lindex $siglist 0]
        set savedIdx $sigs($sig,savedIdx,load)
        if {[string match AxisX* $axis]} {
            set savedXAxis $ax($savedIdx,xaxis,saved)
            set savedXAxisConfigs $ax($savedXAxis,configs,saved)
            eval $graph axisconfig $axis $savedXAxisConfigs
        } elseif {[string match AxisY* $axis]} {
            set savedYAxis $ax($savedIdx,yaxis,saved)
            set savedYAxisConfigs $ax($savedYAxis,configs,saved)
            eval $graph axisconfig $axis $savedYAxisConfigs
        } else {
            set savedAxisConfigs $ax($axis,configs,saved)
            eval $graph axisconfig $axis $savedAxisConfigs
        }
    }


    # Restore Measurements
    set sigs(Signal30,idx,saved) 0
    set sigs(Signal29,idx,saved) 1
    set sigs(Signal28,idx,saved) 2
    set sigs(Signal27,idx,saved) 3
    set sigs(Signal26,idx,saved) 4
    set sigs(Signal25,idx,saved) 5
    set sigs(Signal24,idx,saved) 6
    set sigs(Signal31,idx,saved) 7
    set sigs(Signal23,idx,saved) 8
    set sigs(Signal22,idx,saved) 9
    set sigs(Signal21,idx,saved) 10
global Meas_${graph}
    global Meas
    set Meas(tool,xrXStart) start
    set Meas(tool,xrXEnd) end
    set Meas(tool,xrYStart) start
    set Meas(tool,xrYEnd) end
if {[lsearch $sigs(wfIdx,load) $sigs(Signal30,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:RiseFall $graph Signal30  {Falltime} {0.1 0.5 0.9} default default  xyrangeAll - 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1 {} 4} {Falltime} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(4,lblx) 19.0
  set Meas_${graph}_${mindex}(4,lbly) 25.0
  set Meas_${graph}_${mindex}(4,arrow) 0
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:RiseFall $graph Signal29  {Falltime} {0.1 0.5 0.9} default default  xyrangeAll - 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1 {} 6} {Falltime} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(6,lblx) 17.0
  set Meas_${graph}_${mindex}(6,lbly) 25.0
  set Meas_${graph}_${mindex}(6,arrow) 0
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:RiseFall $graph Signal28  {Falltime} {0.1 0.5 0.9} default default  xyrangeAll - 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1 {} 6} {Falltime} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(6,lblx) 15.0
  set Meas_${graph}_${mindex}(6,lbly) 25.0
  set Meas_${graph}_${mindex}(6,arrow) 0
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal28,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:RiseFall $graph Signal28  {Risetime} {0.1 0.5 0.9} default default  xyrangeAll - 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1 {} 6} {Risetime} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(6,lblx) -49.0
  set Meas_${graph}_${mindex}(6,lbly) 22.0
  set Meas_${graph}_${mindex}(6,arrow) 0
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal29,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:RiseFall $graph Signal29  {Risetime} {0.1 0.5 0.9} default default  xyrangeAll - 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1 {} 6} {Risetime} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(6,lblx) 31.0
  set Meas_${graph}_${mindex}(6,lbly) 24.0
  set Meas_${graph}_${mindex}(6,arrow) 0
}
}
}
if {[lsearch $sigs(wfIdx,load) $sigs(Signal30,idx,saved)] != -1} {
set measCmd [Graph:ReplaceMeasElements1 {GrMeas:RiseFall $graph Signal30  {Risetime} {0.1 0.5 0.9} default default  xyrangeAll - 0 - activeGraph {{5}  {-}  {1}  {20}  {No}  {No}  {50}  {10}  {auto}  {Parameter}} 1 {} 4} {Risetime} $graph]
if {$measCmd != ""} {
set mindex [eval $measCmd]
set fail [expr [isvalid integer $mindex] && {$mindex < 0}]
if {! $fail} {
  global Meas_${graph}_${mindex}
  set Meas_${graph}_${mindex}(4,lblx) 31.0
  set Meas_${graph}_${mindex}(4,lbly) 23.0
  set Meas_${graph}_${mindex}(4,arrow) 0
}
}
}

    # Restore Markers


    # Restore Mem Label positions
    $graph raise MemLbl

    # Clear feedback
    set tk_status {}
    #update idletasks
}

# Call the new procedure
if [catch {AimBusy "Graph:LoadGraph0 $Graph(filename) $graph" . watch} msg] {
    AimMessage $msg error "Cant Read Graph" modal
}
# Delete the new procedure
rename Graph:LoadGraph0 {}
